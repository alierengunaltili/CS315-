/* drone.l */
%option yylineno
NL           \n
LSB    \[
RSB    \]
LCB	 \{
RCB	 \}
HTS    #
EXM    !
LP    \(
RP    \)
divide \/
comma     ,
end_stmt    \;
assign_operator     =
beginning begin
callpredefined callp
end end
main main
if    if
else    else
function    function
call	call
for     for
in    in
step     step
while     while
and    and
or    or
arrow    ->
string_identifier    \"
char_identifier    \'
equals_op     ==
greater_op     >
lesser_op        <
not     {EXM}
notEquals_op    {not}{assign_operator}
greaterOrEqual     {greater_op}{assign_operator}
lesserOrEqual_op    {lesser_op}{assign_operator}
arith_op        [+-/*]
const        const
bool_type bool
bool     (true|false|0|1)
true	true
false	false
int    int
number    [1-9]
digit     [0-9]
int_value		[+-]?({digit}+)
float 	float
float_value    	[+-]?({digit})+(\.)({digit}*)
char     char
string    string
string_value	([A-Za-z])
raptin     raptin
raptout	raptout
comment		{HTS}{string_value}{EXM}{HTS}
drone_x    droneX
drone_y    droneY
struct     struct
surface    Surface
altitude    altitude
heading    heading
surface_height	surfaceHeight
surface_width	surfaceWidth
surface_centerX	sCenterX
surface_centerY	sCenterY
surface_get_height        sgetHeight
surface_get_width        sgetWidth
surface_get_centerX    sgetCenterX
surface_get_centerY        sgetCenterY
get_heading        getHeading
get_altitude        getAltitude
get_temp            getTemp
nozzle_on_off        nozzleOnOff
heading_left        headingLeft
heading_right        headingRight
stop_drone        stopDrone
move_right 			moveRight
move_left 			moveLeft
move_forward        moveForward
move_backward 		moveBackward
climb_up            climbUp
drop_down        dropDown
power_function	mathPow
connect_wifi	connectWifi
return	return
%%
[ \t]        ;
{divide}    return(DIVIDE);
{bool_type}    return(BOOL);
{callpredefined} return(CALL_PREDEFINED);
{LSB}     return(LSB);
{RSB}     return(RSB);
{LCB}	  return(LCB);
{RCB}	  return(RCB);
{LP} 	  return(LP);
{RP} 	  return(RP);
{comma}   return(COMMA);
{beginning}   return(BEGINNING);
{end}     return(END);
{main}    return(MAIN);
{end_stmt} 	return(END_STATEMENT);
{assign_operator} 	return(ASSIGNOP);
{if} 	return(IF);
{else} 	return(ELSE );
{function} 		return(FUNCTION_IDENTIFIER);
{in} 		return(IN);
{step} 		return(STEP);
{while} 		return(WHILE);
{and} 		return(AND);
{or} 		return(OR);
{arrow} 		return(ARROW);
{return}		return(RETURN);
{string_identifier}    	return(STRING_IDENTIFIER);
{char_identifier}    	return(CHAR_IDENTIFIER);
{equals_op}     	return(EQUALS_OP);
{greater_op}     	return(GREATER_THAN);
{greaterOrEqual}    return(GREATER_OR_EQUAL);
{lesser_op}     	return(LESS_THAN);
{notEquals_op}     	return(NOT_EQUALS);
{lesserOrEqual_op}     	return(LESS_OR_EQUAL);
{const}     	return(CONST_TYPE);
{true}     	                return(TRUE);
{false}    	                return(FALSE);
{float}    	                return(FLOAT_TYPE);
{char}    	                return(CHAR_TYPE);
{string}    	            return(STRING_TYPE);
{int}     	return(INTEGER_TYPE);
{raptin}    	return(RAPTIN);
{raptout}    	return(RAPTOUT);
{power_function} return(MATH_POW);
{int_value}    	return(INTEGER_VALUE);
{float_value}    	return(FLOAT_VALUE);
{drone_x}    	            return(DRONE_X);
{drone_y}    	            return(DRONE_Y);
{struct}    	            return(STRUCT);
{surface}    	            return(SURFACE);
{altitude}    	            return(ALTITUDE);
{heading}    	            return(HEADING);
{surface_height}		    return(SURFACE_HEIGHT);
{surface_width}		        return(SURFACE_WIDTH);
{surface_centerX}		    return(SURFACE_CENTER_X);
{surface_centerY}		    return(SURFACE_CENTER_Y);
{surface_get_height}    	return(SGET_HEIGHT);
{surface_get_width}        	return(SGET_WIDTH);
{surface_get_centerX}    	return(SGET_CENTER_X);
{surface_get_centerY}    	return(SGET_CENTER_Y);
{call}		        return(CALL_FUNCTION);
{get_heading}    	return(FUNCTION_GET_HEADING);
{get_altitude}    	return(FUNCTION_GET_ALTITUDE);
{get_temp}    	return(FUNCTION_GET_TEMP);
{nozzle_on_off}    	return(FUNCTION_NOZZLE_ON_OFF);
{heading_left}    	return(FUNCTION_HEADING_LEFT);
{heading_right}    	return(FUNCTION_HEADING_RIGHT);
{stop_drone}    	return(FUNCTION_STOP_DRONE);
{move_left}			return(FUNCTION_MOVE_LEFT);
{move_right}		return(FUNCTION_MOVE_RIGHT);
{move_backward}		return(FUNCTION_MOVE_BACKWARD);
{move_forward}    	return(FUNCTION_MOVE_FORWARD);
{climb_up}    	return(FUNCTION_CLIMB_UP);
{drop_down}    	return(FUNCTION_DROP_DOWN);
{connect_wifi}    	return(FUNCTION_CONNECT_TO_WIFI);
{for} 	return(FOR);

\+            	return(PLUS);
\-           	return(MINUS);
\*              return(MULTIPLY);
{comment}		return(COMMENT);
{string_value}+{digit}*    	return(GENERAL_IDENTIFIER);
[ \t\n]             ;
%%  
int yywrap(){
	return 1;
}